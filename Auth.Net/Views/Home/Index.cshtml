

@{
    ViewBag.Title = "Welcome Page";
}


<div class="jumbotron">
    <h1>ASP.NET</h1>
    <p class="lead">Welcome to sample application for ASP.NET authentification and encryption</p>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="form-group">
            <label for="inputText1">Text1</label>
            <input type="text" class="form-control" id="inputText1">
        </div>
        <div class="form-group">
            <label for="inputText2">Text2</label>
            <input type="text" class="form-control" id="inputText2">
        </div>
        <div class="form-group">
            <label for="inputText3">Text3</label>
            <input type="text" class="form-control" id="inputText3">
        </div>
        <div class="form-group">
            <label for="inPubKey">Public Key</label>
            <input type="text" class="form-control" id="inPubKey">
        </div>

        <button class="btn btn-default" onclick="doEncrypt();">Do encryption</button>
    </div>
</div>
<p class="text-danger" id="status"></p>

<div id="progress" class="modal fade" data-keyboard="false" role="dialog">
    <div class="modal-dialog" role="document">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-body ">
                <div class="row">
                    <img class="col-sm-offset-1 col-xs-offset-1" src="~/Content/Images/preloader48.gif" />
                    <span class="col-sm-offset-1 col-xs-offset-1 text-lg ">Processing...</span>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts{
    @Scripts.Render("~/bundles/app/encrypt")
}
<script>
    function doEncrypt() {
        $('#status').hide();
        $('#progress').modal('show');
        var text1 = $('#inputText1').val();
        // The passphrase used to repeatably generate this RSA key.
        var salt = CryptoJS.lib.WordArray.random(128 / 8);
        var passPhrase = salt.toString(CryptoJS.enc.Base64); // randomize
        // The length of the RSA key, in bits.
        var bits = 2048;
        var RSAkey = cryptico.generateRSAKey(passPhrase, bits);
        var publicKeyString = cryptico.publicKeyString(RSAkey);
        $('#inPubKey').val(publicKeyString);

        //get aes key from backend
        var encryptedData = authAes.getKey(publicKeyString)
            //encrypt text
            //set  text2
            .done(function (data) {
                //RSA decrypt
                var decryptionResult = {
                    key: RSAkey.decrypt(cryptico.b64to16(data.key)),
                    iv: RSAkey.decrypt(cryptico.b64to16(data.iv))
                };
                //aes encrypt
                var encrypted = authAes.encrypt(decryptionResult, text1);
                $('#inputText2').val(encrypted.toString());
            })
            //send to server
            .then(function () { return authAes.getDecrypted($('#inputText2').val()) })
            //set decrypted to text3
            .done(function (data) { $('#inputText3').val(data.value); }).
            then(function () { $('#progress').modal('hide') }, function (e) { $('#status').text(e);$('#status').show(); $('#progress').modal('hide') })
        ;
    }

</script>
